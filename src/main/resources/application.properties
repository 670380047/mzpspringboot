#yml配置需要再":"后面加一个空格
#日志配置
#logging.level.root = debug
##日志文件的位置
#  path: E:\mzp\IDEA\workspace\mzpWebMVC\mzpspringboot
##日志文件的名字
#  level: info
#  file: apringbootlog

#===================logback日志====================
#打印sql语句。com.example.mzpspringboot.dao.IUserInfoMapper是（mapper.java所在位置）
logging.level.com.example.mzpspringboot.dao.*=debug

#更改项目启动的端口号,默认的就是8080
server.port=8080
#更改上下文根路径
#server.servlet.context-path=/test

#切换多配置文件。 如果存在 application-test1.properties   application-test2.properties  这两个配置文件
#默认的application[-default].properties会根据 配置（“斜杠和点” 中间的名字，自动加载配置。比如这里的test1）
#spring.profiles.active=test1


#数据库配置信息mysql
#spring.datasource.url=jdbc:mysql://10.6.12.85:23306/mzp
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mzp
spring.datasource.username=root
spring.datasource.password=rootroot
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver  # 旧的，过期了
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


#=============jpa配置=================
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.hbm2ddl.auto=update
#打印sql语句
spring.jpa.show-sql=true
#方言设置，并且引擎修改为innoDB
#升级到Springboot2.0后，依然是使用jpa、Hibernate来操作mysql，
# 发现Hibernate默认创建的表是myisam引擎，而不是innodb。添加下面的方言即可修改为innodb
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect


#========================Mybatis=================
#xml方式中，mapper.xml所在的
mybatis.mapper-locations=classpath:mapper/*.xml
#xml方式时，实体类起别名，用于返回时查询结果和实体类关联（此时返回是不需要写全路径，只需要写类名。 问题：此时类名首字母大写还是小写？？？都行？）
mybatis.type-aliases-package=com.example.mzpspringboot.model
#useGeneratedKeys="true"。用于使用jdbc的getGeneratedKeys 来获取自增长的主键.  默认为false
mybatis.configuration.use-generated-keys=true

#========================pageHelper分页=================
#offsetAsPageNum:设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用.
pagehelper.offset-as-page-num=true
#启用合理化时，如果pageNum<=1会查询第一页，如果pageNum>=pages会查询最后一页。
pagehelper.reasonable=true
#查询时会进行总数count查询
pagehelper.row-bounds-with-count=true


#================thymeleaf================
#页面加入   xmlns:th="http://www.thymeleaf.org"
#选用thymeleaf作为模板，必须遵守H5的格式，即必须有尾标签
# (注释的部分是Thymeleaf默认的配置，如有其它需求可以自行更改)

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.servlet.content-type=text/html

#关闭thymeleaf缓存。开发环境下要关闭缓存，否则每次更改页面都要重启服务器。生产环境需要打开
spring.thymeleaf.cache=false

#==================springMVC配置====================
#spring.mvc.view.prefix=/     # Spring MVC view prefix.
#spring.mvc.view.suffix=.html    # Spring MVC view suffix.


##==================redis的Lettuce客户端====================
##*******************************redis单机模式
#spring.redis.host=192.168.56.128
#spring.redis.port=6379
#spring.redis.password=mzp
## url方式，包含密码、ip、端口
#spring.redis.url=redis://mzp@192.168.56.128:6379

##*******************************redis哨兵模式sentinel
## 哨兵主节点的名字（所有sentinel这种配置的都是一样的）
## 在sentinel.conf配置文件中 sentinel monitor mzp-redis-master 192.168.56.128 28291 2
#spring.redis.sentinel.master=mzp-redis-master
## 所有的sentinel节点的ip和端口号（注意是sentinel的地址，不是redis服务器），用逗号隔开
#spring.redis.sentinel.nodes=192.168.56.128:28291,192.168.56.128:28292,192.168.56.128:28293
## 如果redis服务器有密码的话，这里可以配置密码
#spring.redis.password=mzp

#********************************redis集群cluster
# 这里配置的是集群中所有的redis服务器的节点
spring.redis.cluster.nodes=192.168.56.128:7291,192.168.56.128:7292,192.168.56.128:7293,192.168.56.128:7294,192.168.56.128:7295,192.168.56.128:7296,192.168.56.128:7297,192.168.56.128:7298
## 如果redis服务器有密码的话，这里可以配置密码
spring.redis.password=mzp


# lettuce连接池配置
# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1s
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=0

